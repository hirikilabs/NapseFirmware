#include "napseWifi.h"
#include "esp_wifi_types.h"
#include <cstdint>
#include <stdio.h>

WiFiUDP udp;
WiFiServer tcp;

void NapseWifi::init() {
    // try to conenct to WiFi
    wifi_mode = NAPSE_WIFI_MODE_STA;
    int timeout = 0;
    // get credentials from SPIFFS
    napse_wifi_credentials_t creds = getCredentials();
    // if we have saved credentials, try to connect in STA mode
    // if conection fails, create the AP Portal.
    if (creds.ok) {
        WiFi.begin(creds.ssid, creds.psk);
        // Wait for connection
        while (WiFi.status() != WL_CONNECTED) {
            delay(500);
            Serial.print(".");
            timeout++;
            if (timeout > 10) {
                createAPPortal();
                break;
            }
        }
    } else {
        createAPPortal();
    }

    // if we connecterd normally
    if (wifi_mode == NAPSE_WIFI_MODE_STA) {
        Serial.println("");
        Serial.print("Connected to ");
        Serial.println(WIFI_SSID);
        Serial.print("IP address: ");
        Serial.println(WiFi.localIP());
        tcp.begin(NAPSE_TCP_PORT);
        udp.begin(WiFi.localIP(), NAPSE_UDP_PORT);
    } else {
        tcp.begin(NAPSE_TCP_PORT);
        udp.begin(WiFi.softAPIP(), NAPSE_UDP_PORT);
    }
 
    //udp = new WiFiUDP();
}

void NapseWifi::createAPPortal() {
    Serial.println("\nCan't connect to AP, creating wifi...");
    // create Wifi name
    char ssid[23];
    uint64_t chip_id = ESP.getEfuseMac();
    snprintf(ssid, 23, "NIT-%llX", chip_id);
    WiFi.mode(WIFI_AP);
    WiFi.softAP(ssid, WIFI_AP_PSK);
    Serial.print("AP IP address: ");
    Serial.println(WiFi.softAPIP());
    wifi_mode = NAPSE_WIFI_MODE_AP;
}

napse_wifi_credentials_t NapseWifi::getCredentials() {
    napse_wifi_credentials_t creds;
    creds.psk = WIFI_PSK;
    creds.ssid = WIFI_SSID;
    creds.ok = true;
    return creds;
}

void NapseWifi::saveCredentials(napse_wifi_credentials_t credentials) {

}

void NapseWifi::sendData(uint32_t data[]) {
    const char * udpAddress = "172.16.30.240";
    udp.beginPacket(udpAddress, 31337);
    udp.write((uint8_t *)data, 40);
    udp.endPacket();
    udp.flush();
}

WiFiClient NapseWifi::client() {
    return tcp.available();
}

void NapseWifi::updateBatt(float vbatt) {

}
